// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package manager2systema

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SystemAClient is the client API for SystemA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemAClient interface {
	// CreateDomain requires that the manager authenticate using an
	// end-user's access token, to perform the action on behalf of that
	// user.
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	// RemoveDomain removes a domain that was previously created by the
	// same manager using CreateDomain.  The manager can take this
	// action itself, not on behalf of the user that created the domain,
	// so this requires that the manager authenticate itself, but does
	// not require an end-user's token.
	RemoveDomain(ctx context.Context, in *RemoveDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReverseConnection establishes a stream that is used for System A
	// to send gRPC requests back to the manager.  This requires that
	// the manager authenticate itself, but does not require an
	// end-user's token.
	ReverseConnection(ctx context.Context, opts ...grpc.CallOption) (SystemA_ReverseConnectionClient, error)
}

type systemAClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemAClient(cc grpc.ClientConnInterface) SystemAClient {
	return &systemAClient{cc}
}

func (c *systemAClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, "/telepresence.manager2systema.SystemA/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAClient) RemoveDomain(ctx context.Context, in *RemoveDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/telepresence.manager2systema.SystemA/RemoveDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAClient) ReverseConnection(ctx context.Context, opts ...grpc.CallOption) (SystemA_ReverseConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SystemA_serviceDesc.Streams[0], "/telepresence.manager2systema.SystemA/ReverseConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &systemAReverseConnectionClient{stream}
	return x, nil
}

type SystemA_ReverseConnectionClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type systemAReverseConnectionClient struct {
	grpc.ClientStream
}

func (x *systemAReverseConnectionClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *systemAReverseConnectionClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SystemAServer is the server API for SystemA service.
// All implementations must embed UnimplementedSystemAServer
// for forward compatibility
type SystemAServer interface {
	// CreateDomain requires that the manager authenticate using an
	// end-user's access token, to perform the action on behalf of that
	// user.
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	// RemoveDomain removes a domain that was previously created by the
	// same manager using CreateDomain.  The manager can take this
	// action itself, not on behalf of the user that created the domain,
	// so this requires that the manager authenticate itself, but does
	// not require an end-user's token.
	RemoveDomain(context.Context, *RemoveDomainRequest) (*empty.Empty, error)
	// ReverseConnection establishes a stream that is used for System A
	// to send gRPC requests back to the manager.  This requires that
	// the manager authenticate itself, but does not require an
	// end-user's token.
	ReverseConnection(SystemA_ReverseConnectionServer) error
	mustEmbedUnimplementedSystemAServer()
}

// UnimplementedSystemAServer must be embedded to have forward compatible implementations.
type UnimplementedSystemAServer struct {
}

func (UnimplementedSystemAServer) CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedSystemAServer) RemoveDomain(context.Context, *RemoveDomainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDomain not implemented")
}
func (UnimplementedSystemAServer) ReverseConnection(SystemA_ReverseConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseConnection not implemented")
}
func (UnimplementedSystemAServer) mustEmbedUnimplementedSystemAServer() {}

// UnsafeSystemAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemAServer will
// result in compilation errors.
type UnsafeSystemAServer interface {
	mustEmbedUnimplementedSystemAServer()
}

func RegisterSystemAServer(s grpc.ServiceRegistrar, srv SystemAServer) {
	s.RegisterService(&_SystemA_serviceDesc, srv)
}

func _SystemA_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.manager2systema.SystemA/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemA_RemoveDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAServer).RemoveDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.manager2systema.SystemA/RemoveDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAServer).RemoveDomain(ctx, req.(*RemoveDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemA_ReverseConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SystemAServer).ReverseConnection(&systemAReverseConnectionServer{stream})
}

type SystemA_ReverseConnectionServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type systemAReverseConnectionServer struct {
	grpc.ServerStream
}

func (x *systemAReverseConnectionServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *systemAReverseConnectionServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SystemA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.manager2systema.SystemA",
	HandlerType: (*SystemAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _SystemA_CreateDomain_Handler,
		},
		{
			MethodName: "RemoveDomain",
			Handler:    _SystemA_RemoveDomain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReverseConnection",
			Handler:       _SystemA_ReverseConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/manager2systema/manager2systama.proto",
}
