// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: daemon.proto

package rpc

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// InterceptError is a common error type used by the intercept call family (add, remove, list, available).
type InterceptError int32

const (
	InterceptError_InterceptOk              InterceptError = 0
	InterceptError_NoPreviewHost            InterceptError = 1
	InterceptError_NoConnection             InterceptError = 2
	InterceptError_NoTrafficManager         InterceptError = 3
	InterceptError_TrafficManagerConnecting InterceptError = 4
	InterceptError_TrafficManagerError      InterceptError = 5
	InterceptError_AlreadyExists            InterceptError = 6
	InterceptError_NoAcceptableDeployment   InterceptError = 7
	InterceptError_AmbiguousMatch           InterceptError = 8
	InterceptError_FailedToEstablish        InterceptError = 9
	InterceptError_FailedToRemove           InterceptError = 10
	InterceptError_NotFound                 InterceptError = 11
)

// Enum value maps for InterceptError.
var (
	InterceptError_name = map[int32]string{
		0:  "InterceptOk",
		1:  "NoPreviewHost",
		2:  "NoConnection",
		3:  "NoTrafficManager",
		4:  "TrafficManagerConnecting",
		5:  "TrafficManagerError",
		6:  "AlreadyExists",
		7:  "NoAcceptableDeployment",
		8:  "AmbiguousMatch",
		9:  "FailedToEstablish",
		10: "FailedToRemove",
		11: "NotFound",
	}
	InterceptError_value = map[string]int32{
		"InterceptOk":              0,
		"NoPreviewHost":            1,
		"NoConnection":             2,
		"NoTrafficManager":         3,
		"TrafficManagerConnecting": 4,
		"TrafficManagerError":      5,
		"AlreadyExists":            6,
		"NoAcceptableDeployment":   7,
		"AmbiguousMatch":           8,
		"FailedToEstablish":        9,
		"FailedToRemove":           10,
		"NotFound":                 11,
	}
)

func (x InterceptError) Enum() *InterceptError {
	p := new(InterceptError)
	*p = x
	return p
}

func (x InterceptError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterceptError) Descriptor() protoreflect.EnumDescriptor {
	return file_daemon_proto_enumTypes[0].Descriptor()
}

func (InterceptError) Type() protoreflect.EnumType {
	return &file_daemon_proto_enumTypes[0]
}

func (x InterceptError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterceptError.Descriptor instead.
func (InterceptError) EnumDescriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{0}
}

type ConnectResponse_ErrType int32

const (
	ConnectResponse_Ok                   ConnectResponse_ErrType = 0
	ConnectResponse_AlreadyConnected     ConnectResponse_ErrType = 1
	ConnectResponse_Disconnecting        ConnectResponse_ErrType = 2
	ConnectResponse_ClusterFailed        ConnectResponse_ErrType = 3
	ConnectResponse_BridgeFailed         ConnectResponse_ErrType = 4
	ConnectResponse_TrafficManagerFailed ConnectResponse_ErrType = 5
)

// Enum value maps for ConnectResponse_ErrType.
var (
	ConnectResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "AlreadyConnected",
		2: "Disconnecting",
		3: "ClusterFailed",
		4: "BridgeFailed",
		5: "TrafficManagerFailed",
	}
	ConnectResponse_ErrType_value = map[string]int32{
		"Ok":                   0,
		"AlreadyConnected":     1,
		"Disconnecting":        2,
		"ClusterFailed":        3,
		"BridgeFailed":         4,
		"TrafficManagerFailed": 5,
	}
)

func (x ConnectResponse_ErrType) Enum() *ConnectResponse_ErrType {
	p := new(ConnectResponse_ErrType)
	*p = x
	return p
}

func (x ConnectResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_daemon_proto_enumTypes[1].Descriptor()
}

func (ConnectResponse_ErrType) Type() protoreflect.EnumType {
	return &file_daemon_proto_enumTypes[1]
}

func (x ConnectResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectResponse_ErrType.Descriptor instead.
func (ConnectResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{2, 0}
}

type PauseResponse_ErrType int32

const (
	PauseResponse_Ok                   PauseResponse_ErrType = 0
	PauseResponse_AlreadyPaused        PauseResponse_ErrType = 1
	PauseResponse_ConnectedToCluster   PauseResponse_ErrType = 2
	PauseResponse_UnexpectedPauseError PauseResponse_ErrType = 3
)

// Enum value maps for PauseResponse_ErrType.
var (
	PauseResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "AlreadyPaused",
		2: "ConnectedToCluster",
		3: "UnexpectedPauseError",
	}
	PauseResponse_ErrType_value = map[string]int32{
		"Ok":                   0,
		"AlreadyPaused":        1,
		"ConnectedToCluster":   2,
		"UnexpectedPauseError": 3,
	}
)

func (x PauseResponse_ErrType) Enum() *PauseResponse_ErrType {
	p := new(PauseResponse_ErrType)
	*p = x
	return p
}

func (x PauseResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PauseResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_daemon_proto_enumTypes[2].Descriptor()
}

func (PauseResponse_ErrType) Type() protoreflect.EnumType {
	return &file_daemon_proto_enumTypes[2]
}

func (x PauseResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PauseResponse_ErrType.Descriptor instead.
func (PauseResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{3, 0}
}

type ResumeResponse_ErrType int32

const (
	ResumeResponse_Ok                    ResumeResponse_ErrType = 0
	ResumeResponse_NotPaused             ResumeResponse_ErrType = 1
	ResumeResponse_ReEstablishing        ResumeResponse_ErrType = 2
	ResumeResponse_UnexpectedResumeError ResumeResponse_ErrType = 3
)

// Enum value maps for ResumeResponse_ErrType.
var (
	ResumeResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "NotPaused",
		2: "ReEstablishing",
		3: "UnexpectedResumeError",
	}
	ResumeResponse_ErrType_value = map[string]int32{
		"Ok":                    0,
		"NotPaused":             1,
		"ReEstablishing":        2,
		"UnexpectedResumeError": 3,
	}
)

func (x ResumeResponse_ErrType) Enum() *ResumeResponse_ErrType {
	p := new(ResumeResponse_ErrType)
	*p = x
	return p
}

func (x ResumeResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResumeResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_daemon_proto_enumTypes[3].Descriptor()
}

func (ResumeResponse_ErrType) Type() protoreflect.EnumType {
	return &file_daemon_proto_enumTypes[3]
}

func (x ResumeResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResumeResponse_ErrType.Descriptor instead.
func (ResumeResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{4, 0}
}

type DaemonStatusResponse_ErrType int32

const (
	DaemonStatusResponse_Ok         DaemonStatusResponse_ErrType = 0
	DaemonStatusResponse_NotStarted DaemonStatusResponse_ErrType = 1
	DaemonStatusResponse_Paused     DaemonStatusResponse_ErrType = 2
	DaemonStatusResponse_NoNetwork  DaemonStatusResponse_ErrType = 3
)

// Enum value maps for DaemonStatusResponse_ErrType.
var (
	DaemonStatusResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "NotStarted",
		2: "Paused",
		3: "NoNetwork",
	}
	DaemonStatusResponse_ErrType_value = map[string]int32{
		"Ok":         0,
		"NotStarted": 1,
		"Paused":     2,
		"NoNetwork":  3,
	}
)

func (x DaemonStatusResponse_ErrType) Enum() *DaemonStatusResponse_ErrType {
	p := new(DaemonStatusResponse_ErrType)
	*p = x
	return p
}

func (x DaemonStatusResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaemonStatusResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_daemon_proto_enumTypes[4].Descriptor()
}

func (DaemonStatusResponse_ErrType) Type() protoreflect.EnumType {
	return &file_daemon_proto_enumTypes[4]
}

func (x DaemonStatusResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaemonStatusResponse_ErrType.Descriptor instead.
func (DaemonStatusResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{7, 0}
}

type ConnectorStatusResponse_ErrType int32

const (
	ConnectorStatusResponse_Ok           ConnectorStatusResponse_ErrType = 0
	ConnectorStatusResponse_NotStarted   ConnectorStatusResponse_ErrType = 1
	ConnectorStatusResponse_Disconnected ConnectorStatusResponse_ErrType = 2
)

// Enum value maps for ConnectorStatusResponse_ErrType.
var (
	ConnectorStatusResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "NotStarted",
		2: "Disconnected",
	}
	ConnectorStatusResponse_ErrType_value = map[string]int32{
		"Ok":           0,
		"NotStarted":   1,
		"Disconnected": 2,
	}
)

func (x ConnectorStatusResponse_ErrType) Enum() *ConnectorStatusResponse_ErrType {
	p := new(ConnectorStatusResponse_ErrType)
	*p = x
	return p
}

func (x ConnectorStatusResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectorStatusResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_daemon_proto_enumTypes[5].Descriptor()
}

func (ConnectorStatusResponse_ErrType) Type() protoreflect.EnumType {
	return &file_daemon_proto_enumTypes[5]
}

func (x ConnectorStatusResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectorStatusResponse_ErrType.Descriptor instead.
func (ConnectorStatusResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{8, 0}
}

// LogMessage carries a message and a flag telling the service if the message is intended for
// debugging or more general info.
type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDebug bool   `protobuf:"varint,1,opt,name=IsDebug,proto3" json:"IsDebug,omitempty"`
	Text    string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{0}
}

func (x *LogMessage) GetIsDebug() bool {
	if x != nil {
		return x.IsDebug
	}
	return false
}

func (x *LogMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// ConnectRequest contains the information needed to connect ot a cluster.
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   string   `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	Namespace string   `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	ManagerNS string   `protobuf:"bytes,3,opt,name=ManagerNS,proto3" json:"ManagerNS,omitempty"`
	InstallID string   `protobuf:"bytes,4,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	Args      []string `protobuf:"bytes,5,rep,name=Args,proto3" json:"Args,omitempty"`
	// true if this is part of a CI run
	IsCI bool `protobuf:"varint,6,opt,name=IsCI,proto3" json:"IsCI,omitempty"`
	// true if the call must wait for a running traffic manager before returning
	InterceptEnabled bool `protobuf:"varint,7,opt,name=InterceptEnabled,proto3" json:"InterceptEnabled,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ConnectRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConnectRequest) GetManagerNS() string {
	if x != nil {
		return x.ManagerNS
	}
	return ""
}

func (x *ConnectRequest) GetInstallID() string {
	if x != nil {
		return x.InstallID
	}
	return ""
}

func (x *ConnectRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ConnectRequest) GetIsCI() bool {
	if x != nil {
		return x.IsCI
	}
	return false
}

func (x *ConnectRequest) GetInterceptEnabled() bool {
	if x != nil {
		return x.InterceptEnabled
	}
	return false
}

type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error          ConnectResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.ConnectResponse_ErrType" json:"Error,omitempty"`
	ErrorText      string                  `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
	ClusterContext string                  `protobuf:"bytes,3,opt,name=ClusterContext,proto3" json:"ClusterContext,omitempty"`
	ClusterServer  string                  `protobuf:"bytes,4,opt,name=ClusterServer,proto3" json:"ClusterServer,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectResponse) GetError() ConnectResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return ConnectResponse_Ok
}

func (x *ConnectResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *ConnectResponse) GetClusterContext() string {
	if x != nil {
		return x.ClusterContext
	}
	return ""
}

func (x *ConnectResponse) GetClusterServer() string {
	if x != nil {
		return x.ClusterServer
	}
	return ""
}

type PauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     PauseResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.PauseResponse_ErrType" json:"Error,omitempty"`
	ErrorText string                `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
}

func (x *PauseResponse) Reset() {
	*x = PauseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResponse) ProtoMessage() {}

func (x *PauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResponse.ProtoReflect.Descriptor instead.
func (*PauseResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{3}
}

func (x *PauseResponse) GetError() PauseResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return PauseResponse_Ok
}

func (x *PauseResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type ResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     ResumeResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.ResumeResponse_ErrType" json:"Error,omitempty"`
	ErrorText string                 `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
}

func (x *ResumeResponse) Reset() {
	*x = ResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeResponse) ProtoMessage() {}

func (x *ResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeResponse.ProtoReflect.Descriptor instead.
func (*ResumeResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{4}
}

func (x *ResumeResponse) GetError() ResumeResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return ResumeResponse_Ok
}

func (x *ResumeResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{5}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APIVersion int32  `protobuf:"varint,1,opt,name=APIVersion,proto3" json:"APIVersion,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{6}
}

func (x *VersionResponse) GetAPIVersion() int32 {
	if x != nil {
		return x.APIVersion
	}
	return 0
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DaemonStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error DaemonStatusResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.DaemonStatusResponse_ErrType" json:"Error,omitempty"`
}

func (x *DaemonStatusResponse) Reset() {
	*x = DaemonStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonStatusResponse) ProtoMessage() {}

func (x *DaemonStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonStatusResponse.ProtoReflect.Descriptor instead.
func (*DaemonStatusResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{7}
}

func (x *DaemonStatusResponse) GetError() DaemonStatusResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return DaemonStatusResponse_Ok
}

type ConnectorStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      ConnectorStatusResponse_ErrType         `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.ConnectorStatusResponse_ErrType" json:"Error,omitempty"`
	ErrorText  string                                  `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
	Bridge     bool                                    `protobuf:"varint,3,opt,name=Bridge,proto3" json:"Bridge,omitempty"`
	Cluster    *ConnectorStatusResponse_ClusterInfo    `protobuf:"bytes,4,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Intercepts *ConnectorStatusResponse_InterceptsInfo `protobuf:"bytes,5,opt,name=Intercepts,proto3" json:"Intercepts,omitempty"`
}

func (x *ConnectorStatusResponse) Reset() {
	*x = ConnectorStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorStatusResponse) ProtoMessage() {}

func (x *ConnectorStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorStatusResponse.ProtoReflect.Descriptor instead.
func (*ConnectorStatusResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectorStatusResponse) GetError() ConnectorStatusResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return ConnectorStatusResponse_Ok
}

func (x *ConnectorStatusResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *ConnectorStatusResponse) GetBridge() bool {
	if x != nil {
		return x.Bridge
	}
	return false
}

func (x *ConnectorStatusResponse) GetCluster() *ConnectorStatusResponse_ClusterInfo {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ConnectorStatusResponse) GetIntercepts() *ConnectorStatusResponse_InterceptsInfo {
	if x != nil {
		return x.Intercepts
	}
	return nil
}

// InterceptRequest contains the information needed to add a deployment intercept.
type InterceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the intercept
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Namespace in which to create the Intercept mapping
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	// Name of the deployment being intercepted
	Deployment string `protobuf:"bytes,3,opt,name=Deployment,proto3" json:"Deployment,omitempty"`
	// Prefix to intercept (default /)
	Prefix     string `protobuf:"bytes,4,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	TargetHost string `protobuf:"bytes,5,opt,name=TargetHost,proto3" json:"TargetHost,omitempty"`
	TargetPort int32  `protobuf:"varint,6,opt,name=TargetPort,proto3" json:"TargetPort,omitempty"`
	// GRPC flag to set on the Intercept mapping. Ideally we'd get this from the
	// Traffic-Manager interceptables instead of having to pass it as a CLI argument.
	GRPC     bool              `protobuf:"varint,7,opt,name=GRPC,proto3" json:"GRPC,omitempty"`
	Preview  bool              `protobuf:"varint,8,opt,name=Preview,proto3" json:"Preview,omitempty"`
	Patterns map[string]string `protobuf:"bytes,9,rep,name=Patterns,proto3" json:"Patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InterceptRequest) Reset() {
	*x = InterceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptRequest) ProtoMessage() {}

func (x *InterceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptRequest.ProtoReflect.Descriptor instead.
func (*InterceptRequest) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{9}
}

func (x *InterceptRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterceptRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InterceptRequest) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *InterceptRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *InterceptRequest) GetTargetHost() string {
	if x != nil {
		return x.TargetHost
	}
	return ""
}

func (x *InterceptRequest) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *InterceptRequest) GetGRPC() bool {
	if x != nil {
		return x.GRPC
	}
	return false
}

func (x *InterceptRequest) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *InterceptRequest) GetPatterns() map[string]string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type RemoveInterceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the intercept
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *RemoveInterceptRequest) Reset() {
	*x = RemoveInterceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInterceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInterceptRequest) ProtoMessage() {}

func (x *RemoveInterceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInterceptRequest.ProtoReflect.Descriptor instead.
func (*RemoveInterceptRequest) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveInterceptRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InterceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      InterceptError `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.InterceptError" json:"Error,omitempty"`
	PreviewURL string         `protobuf:"bytes,2,opt,name=PreviewURL,proto3" json:"PreviewURL,omitempty"`
	Text       string         `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *InterceptResponse) Reset() {
	*x = InterceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptResponse) ProtoMessage() {}

func (x *InterceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptResponse.ProtoReflect.Descriptor instead.
func (*InterceptResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{11}
}

func (x *InterceptResponse) GetError() InterceptError {
	if x != nil {
		return x.Error
	}
	return InterceptError_InterceptOk
}

func (x *InterceptResponse) GetPreviewURL() string {
	if x != nil {
		return x.PreviewURL
	}
	return ""
}

func (x *InterceptResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ListInterceptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      InterceptError                      `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.InterceptError" json:"Error,omitempty"`
	Text       string                              `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	Intercepts []*ListInterceptsResponse_ListEntry `protobuf:"bytes,3,rep,name=Intercepts,proto3" json:"Intercepts,omitempty"`
}

func (x *ListInterceptsResponse) Reset() {
	*x = ListInterceptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterceptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterceptsResponse) ProtoMessage() {}

func (x *ListInterceptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterceptsResponse.ProtoReflect.Descriptor instead.
func (*ListInterceptsResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{12}
}

func (x *ListInterceptsResponse) GetError() InterceptError {
	if x != nil {
		return x.Error
	}
	return InterceptError_InterceptOk
}

func (x *ListInterceptsResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ListInterceptsResponse) GetIntercepts() []*ListInterceptsResponse_ListEntry {
	if x != nil {
		return x.Intercepts
	}
	return nil
}

type AvailableInterceptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      InterceptError                           `protobuf:"varint,1,opt,name=Error,proto3,enum=telepresence.InterceptError" json:"Error,omitempty"`
	Text       string                                   `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	Intercepts []*AvailableInterceptsResponse_ListEntry `protobuf:"bytes,3,rep,name=Intercepts,proto3" json:"Intercepts,omitempty"`
}

func (x *AvailableInterceptsResponse) Reset() {
	*x = AvailableInterceptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableInterceptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableInterceptsResponse) ProtoMessage() {}

func (x *AvailableInterceptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableInterceptsResponse.ProtoReflect.Descriptor instead.
func (*AvailableInterceptsResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{13}
}

func (x *AvailableInterceptsResponse) GetError() InterceptError {
	if x != nil {
		return x.Error
	}
	return InterceptError_InterceptOk
}

func (x *AvailableInterceptsResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AvailableInterceptsResponse) GetIntercepts() []*AvailableInterceptsResponse_ListEntry {
	if x != nil {
		return x.Intercepts
	}
	return nil
}

type ConnectorStatusResponse_ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connected bool   `protobuf:"varint,1,opt,name=Connected,proto3" json:"Connected,omitempty"`
	Server    string `protobuf:"bytes,2,opt,name=Server,proto3" json:"Server,omitempty"`
	Context   string `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *ConnectorStatusResponse_ClusterInfo) Reset() {
	*x = ConnectorStatusResponse_ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorStatusResponse_ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorStatusResponse_ClusterInfo) ProtoMessage() {}

func (x *ConnectorStatusResponse_ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorStatusResponse_ClusterInfo.ProtoReflect.Descriptor instead.
func (*ConnectorStatusResponse_ClusterInfo) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ConnectorStatusResponse_ClusterInfo) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *ConnectorStatusResponse_ClusterInfo) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ConnectorStatusResponse_ClusterInfo) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type ConnectorStatusResponse_InterceptsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connected          bool   `protobuf:"varint,1,opt,name=Connected,proto3" json:"Connected,omitempty"`
	InterceptableCount int32  `protobuf:"varint,2,opt,name=InterceptableCount,proto3" json:"InterceptableCount,omitempty"`
	ClusterIntercepts  int32  `protobuf:"varint,3,opt,name=ClusterIntercepts,proto3" json:"ClusterIntercepts,omitempty"`
	LocalIntercepts    int32  `protobuf:"varint,4,opt,name=LocalIntercepts,proto3" json:"LocalIntercepts,omitempty"`
	LicenseInfo        string `protobuf:"bytes,5,opt,name=LicenseInfo,proto3" json:"LicenseInfo,omitempty"`
}

func (x *ConnectorStatusResponse_InterceptsInfo) Reset() {
	*x = ConnectorStatusResponse_InterceptsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorStatusResponse_InterceptsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorStatusResponse_InterceptsInfo) ProtoMessage() {}

func (x *ConnectorStatusResponse_InterceptsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorStatusResponse_InterceptsInfo.ProtoReflect.Descriptor instead.
func (*ConnectorStatusResponse_InterceptsInfo) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ConnectorStatusResponse_InterceptsInfo) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *ConnectorStatusResponse_InterceptsInfo) GetInterceptableCount() int32 {
	if x != nil {
		return x.InterceptableCount
	}
	return 0
}

func (x *ConnectorStatusResponse_InterceptsInfo) GetClusterIntercepts() int32 {
	if x != nil {
		return x.ClusterIntercepts
	}
	return 0
}

func (x *ConnectorStatusResponse_InterceptsInfo) GetLocalIntercepts() int32 {
	if x != nil {
		return x.LocalIntercepts
	}
	return 0
}

func (x *ConnectorStatusResponse_InterceptsInfo) GetLicenseInfo() string {
	if x != nil {
		return x.LicenseInfo
	}
	return ""
}

type ListInterceptsResponse_ListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace  string            `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Deployment string            `protobuf:"bytes,3,opt,name=Deployment,proto3" json:"Deployment,omitempty"`
	PreviewURL string            `protobuf:"bytes,4,opt,name=PreviewURL,proto3" json:"PreviewURL,omitempty"`
	Patterns   map[string]string `protobuf:"bytes,5,rep,name=Patterns,proto3" json:"Patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetHost string            `protobuf:"bytes,6,opt,name=TargetHost,proto3" json:"TargetHost,omitempty"`
	TargetPort int32             `protobuf:"varint,7,opt,name=TargetPort,proto3" json:"TargetPort,omitempty"`
}

func (x *ListInterceptsResponse_ListEntry) Reset() {
	*x = ListInterceptsResponse_ListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterceptsResponse_ListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterceptsResponse_ListEntry) ProtoMessage() {}

func (x *ListInterceptsResponse_ListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterceptsResponse_ListEntry.ProtoReflect.Descriptor instead.
func (*ListInterceptsResponse_ListEntry) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ListInterceptsResponse_ListEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetPreviewURL() string {
	if x != nil {
		return x.PreviewURL
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetPatterns() map[string]string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *ListInterceptsResponse_ListEntry) GetTargetHost() string {
	if x != nil {
		return x.TargetHost
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

type AvailableInterceptsResponse_ListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Deployment string `protobuf:"bytes,2,opt,name=Deployment,proto3" json:"Deployment,omitempty"`
}

func (x *AvailableInterceptsResponse_ListEntry) Reset() {
	*x = AvailableInterceptsResponse_ListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableInterceptsResponse_ListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableInterceptsResponse_ListEntry) ProtoMessage() {}

func (x *AvailableInterceptsResponse_ListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableInterceptsResponse_ListEntry.ProtoReflect.Descriptor instead.
func (*AvailableInterceptsResponse_ListEntry) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{13, 0}
}

func (x *AvailableInterceptsResponse_ListEntry) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AvailableInterceptsResponse_ListEntry) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

var File_daemon_proto protoreflect.FileDescriptor

var file_daemon_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x53,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e,
	0x53, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73, 0x43, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x49, 0x73, 0x43, 0x49, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x79, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x6b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x22, 0xc0, 0x01, 0x0a, 0x0d,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x56, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0xbb,
	0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4f, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x50,
	0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3c, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x03, 0x22, 0xa6, 0x05, 0x0a, 0x17,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x54, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0xd8, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x33, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x22, 0xf1, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x48, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x22, 0x87, 0x04, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x1a, 0xd4, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x12, 0x58, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x02,
	0x0a, 0x1b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x8f, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x06, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6d,
	0x62, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x08, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0b, 0x32, 0xef, 0x02, 0x0a, 0x06, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x13, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12,
	0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xd9, 0x04, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x36, 0x0a, 0x1c, 0x69, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0b, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_daemon_proto_rawDescOnce sync.Once
	file_daemon_proto_rawDescData = file_daemon_proto_rawDesc
)

func file_daemon_proto_rawDescGZIP() []byte {
	file_daemon_proto_rawDescOnce.Do(func() {
		file_daemon_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_proto_rawDescData)
	})
	return file_daemon_proto_rawDescData
}

var file_daemon_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_daemon_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_daemon_proto_goTypes = []interface{}{
	(InterceptError)(0),                            // 0: telepresence.InterceptError
	(ConnectResponse_ErrType)(0),                   // 1: telepresence.ConnectResponse.ErrType
	(PauseResponse_ErrType)(0),                     // 2: telepresence.PauseResponse.ErrType
	(ResumeResponse_ErrType)(0),                    // 3: telepresence.ResumeResponse.ErrType
	(DaemonStatusResponse_ErrType)(0),              // 4: telepresence.DaemonStatusResponse.ErrType
	(ConnectorStatusResponse_ErrType)(0),           // 5: telepresence.ConnectorStatusResponse.ErrType
	(*LogMessage)(nil),                             // 6: telepresence.LogMessage
	(*ConnectRequest)(nil),                         // 7: telepresence.ConnectRequest
	(*ConnectResponse)(nil),                        // 8: telepresence.ConnectResponse
	(*PauseResponse)(nil),                          // 9: telepresence.PauseResponse
	(*ResumeResponse)(nil),                         // 10: telepresence.ResumeResponse
	(*Empty)(nil),                                  // 11: telepresence.Empty
	(*VersionResponse)(nil),                        // 12: telepresence.VersionResponse
	(*DaemonStatusResponse)(nil),                   // 13: telepresence.DaemonStatusResponse
	(*ConnectorStatusResponse)(nil),                // 14: telepresence.ConnectorStatusResponse
	(*InterceptRequest)(nil),                       // 15: telepresence.InterceptRequest
	(*RemoveInterceptRequest)(nil),                 // 16: telepresence.RemoveInterceptRequest
	(*InterceptResponse)(nil),                      // 17: telepresence.InterceptResponse
	(*ListInterceptsResponse)(nil),                 // 18: telepresence.ListInterceptsResponse
	(*AvailableInterceptsResponse)(nil),            // 19: telepresence.AvailableInterceptsResponse
	(*ConnectorStatusResponse_ClusterInfo)(nil),    // 20: telepresence.ConnectorStatusResponse.ClusterInfo
	(*ConnectorStatusResponse_InterceptsInfo)(nil), // 21: telepresence.ConnectorStatusResponse.InterceptsInfo
	nil,                                      // 22: telepresence.InterceptRequest.PatternsEntry
	(*ListInterceptsResponse_ListEntry)(nil), // 23: telepresence.ListInterceptsResponse.ListEntry
	nil,                                      // 24: telepresence.ListInterceptsResponse.ListEntry.PatternsEntry
	(*AvailableInterceptsResponse_ListEntry)(nil), // 25: telepresence.AvailableInterceptsResponse.ListEntry
}
var file_daemon_proto_depIdxs = []int32{
	1,  // 0: telepresence.ConnectResponse.Error:type_name -> telepresence.ConnectResponse.ErrType
	2,  // 1: telepresence.PauseResponse.Error:type_name -> telepresence.PauseResponse.ErrType
	3,  // 2: telepresence.ResumeResponse.Error:type_name -> telepresence.ResumeResponse.ErrType
	4,  // 3: telepresence.DaemonStatusResponse.Error:type_name -> telepresence.DaemonStatusResponse.ErrType
	5,  // 4: telepresence.ConnectorStatusResponse.Error:type_name -> telepresence.ConnectorStatusResponse.ErrType
	20, // 5: telepresence.ConnectorStatusResponse.Cluster:type_name -> telepresence.ConnectorStatusResponse.ClusterInfo
	21, // 6: telepresence.ConnectorStatusResponse.Intercepts:type_name -> telepresence.ConnectorStatusResponse.InterceptsInfo
	22, // 7: telepresence.InterceptRequest.Patterns:type_name -> telepresence.InterceptRequest.PatternsEntry
	0,  // 8: telepresence.InterceptResponse.Error:type_name -> telepresence.InterceptError
	0,  // 9: telepresence.ListInterceptsResponse.Error:type_name -> telepresence.InterceptError
	23, // 10: telepresence.ListInterceptsResponse.Intercepts:type_name -> telepresence.ListInterceptsResponse.ListEntry
	0,  // 11: telepresence.AvailableInterceptsResponse.Error:type_name -> telepresence.InterceptError
	25, // 12: telepresence.AvailableInterceptsResponse.Intercepts:type_name -> telepresence.AvailableInterceptsResponse.ListEntry
	24, // 13: telepresence.ListInterceptsResponse.ListEntry.Patterns:type_name -> telepresence.ListInterceptsResponse.ListEntry.PatternsEntry
	11, // 14: telepresence.Daemon.Version:input_type -> telepresence.Empty
	11, // 15: telepresence.Daemon.Status:input_type -> telepresence.Empty
	11, // 16: telepresence.Daemon.Pause:input_type -> telepresence.Empty
	11, // 17: telepresence.Daemon.Resume:input_type -> telepresence.Empty
	6,  // 18: telepresence.Daemon.Logger:input_type -> telepresence.LogMessage
	11, // 19: telepresence.Daemon.Quit:input_type -> telepresence.Empty
	11, // 20: telepresence.Connector.Version:input_type -> telepresence.Empty
	11, // 21: telepresence.Connector.Status:input_type -> telepresence.Empty
	7,  // 22: telepresence.Connector.Connect:input_type -> telepresence.ConnectRequest
	15, // 23: telepresence.Connector.AddIntercept:input_type -> telepresence.InterceptRequest
	16, // 24: telepresence.Connector.RemoveIntercept:input_type -> telepresence.RemoveInterceptRequest
	11, // 25: telepresence.Connector.AvailableIntercepts:input_type -> telepresence.Empty
	11, // 26: telepresence.Connector.ListIntercepts:input_type -> telepresence.Empty
	11, // 27: telepresence.Connector.Quit:input_type -> telepresence.Empty
	12, // 28: telepresence.Daemon.Version:output_type -> telepresence.VersionResponse
	13, // 29: telepresence.Daemon.Status:output_type -> telepresence.DaemonStatusResponse
	9,  // 30: telepresence.Daemon.Pause:output_type -> telepresence.PauseResponse
	10, // 31: telepresence.Daemon.Resume:output_type -> telepresence.ResumeResponse
	11, // 32: telepresence.Daemon.Logger:output_type -> telepresence.Empty
	11, // 33: telepresence.Daemon.Quit:output_type -> telepresence.Empty
	12, // 34: telepresence.Connector.Version:output_type -> telepresence.VersionResponse
	14, // 35: telepresence.Connector.Status:output_type -> telepresence.ConnectorStatusResponse
	8,  // 36: telepresence.Connector.Connect:output_type -> telepresence.ConnectResponse
	17, // 37: telepresence.Connector.AddIntercept:output_type -> telepresence.InterceptResponse
	17, // 38: telepresence.Connector.RemoveIntercept:output_type -> telepresence.InterceptResponse
	19, // 39: telepresence.Connector.AvailableIntercepts:output_type -> telepresence.AvailableInterceptsResponse
	18, // 40: telepresence.Connector.ListIntercepts:output_type -> telepresence.ListInterceptsResponse
	11, // 41: telepresence.Connector.Quit:output_type -> telepresence.Empty
	28, // [28:42] is the sub-list for method output_type
	14, // [14:28] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_daemon_proto_init() }
func file_daemon_proto_init() {
	if File_daemon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_daemon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInterceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterceptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableInterceptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorStatusResponse_ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorStatusResponse_InterceptsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterceptsResponse_ListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableInterceptsResponse_ListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_daemon_proto_goTypes,
		DependencyIndexes: file_daemon_proto_depIdxs,
		EnumInfos:         file_daemon_proto_enumTypes,
		MessageInfos:      file_daemon_proto_msgTypes,
	}.Build()
	File_daemon_proto = out.File
	file_daemon_proto_rawDesc = nil
	file_daemon_proto_goTypes = nil
	file_daemon_proto_depIdxs = nil
}
