// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package systema2manager

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManagerCRUDClient is the client API for ManagerCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerCRUDClient interface {
	// Returns a list of currently active intercepts.
	ListIntercepts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InterceptInfoSnapshot, error)
	// RemoveIntercept lets a client remove an intercept.
	RemoveIntercept(ctx context.Context, in *RemoveInterceptRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type managerCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerCRUDClient(cc grpc.ClientConnInterface) ManagerCRUDClient {
	return &managerCRUDClient{cc}
}

func (c *managerCRUDClient) ListIntercepts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InterceptInfoSnapshot, error) {
	out := new(InterceptInfoSnapshot)
	err := c.cc.Invoke(ctx, "/telepresence.systema2manager.ManagerCRUD/ListIntercepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerCRUDClient) RemoveIntercept(ctx context.Context, in *RemoveInterceptRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/telepresence.systema2manager.ManagerCRUD/RemoveIntercept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerCRUDServer is the server API for ManagerCRUD service.
// All implementations must embed UnimplementedManagerCRUDServer
// for forward compatibility
type ManagerCRUDServer interface {
	// Returns a list of currently active intercepts.
	ListIntercepts(context.Context, *empty.Empty) (*InterceptInfoSnapshot, error)
	// RemoveIntercept lets a client remove an intercept.
	RemoveIntercept(context.Context, *RemoveInterceptRequest) (*empty.Empty, error)
	mustEmbedUnimplementedManagerCRUDServer()
}

// UnimplementedManagerCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedManagerCRUDServer struct {
}

func (UnimplementedManagerCRUDServer) ListIntercepts(context.Context, *empty.Empty) (*InterceptInfoSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntercepts not implemented")
}
func (UnimplementedManagerCRUDServer) RemoveIntercept(context.Context, *RemoveInterceptRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIntercept not implemented")
}
func (UnimplementedManagerCRUDServer) mustEmbedUnimplementedManagerCRUDServer() {}

// UnsafeManagerCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerCRUDServer will
// result in compilation errors.
type UnsafeManagerCRUDServer interface {
	mustEmbedUnimplementedManagerCRUDServer()
}

func RegisterManagerCRUDServer(s grpc.ServiceRegistrar, srv ManagerCRUDServer) {
	s.RegisterService(&_ManagerCRUD_serviceDesc, srv)
}

func _ManagerCRUD_ListIntercepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerCRUDServer).ListIntercepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.systema2manager.ManagerCRUD/ListIntercepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerCRUDServer).ListIntercepts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerCRUD_RemoveIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerCRUDServer).RemoveIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.systema2manager.ManagerCRUD/RemoveIntercept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerCRUDServer).RemoveIntercept(ctx, req.(*RemoveInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerCRUD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.systema2manager.ManagerCRUD",
	HandlerType: (*ManagerCRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIntercepts",
			Handler:    _ManagerCRUD_ListIntercepts_Handler,
		},
		{
			MethodName: "RemoveIntercept",
			Handler:    _ManagerCRUD_RemoveIntercept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/systema2manager/systema2manager.proto",
}

// ManagerProxyClient is the client API for ManagerProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerProxyClient interface {
	// The first argument chunk must be an "intercept_id"; after that no
	// chunk may be an intercept_id.  System A calls this when it
	// recieves a connection to "XYZ.preview.edgestack.me", and that
	// domain belongs to an intercept that belongs to this manager.
	HandleConnection(ctx context.Context, opts ...grpc.CallOption) (ManagerProxy_HandleConnectionClient, error)
}

type managerProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerProxyClient(cc grpc.ClientConnInterface) ManagerProxyClient {
	return &managerProxyClient{cc}
}

func (c *managerProxyClient) HandleConnection(ctx context.Context, opts ...grpc.CallOption) (ManagerProxy_HandleConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManagerProxy_serviceDesc.Streams[0], "/telepresence.systema2manager.ManagerProxy/HandleConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerProxyHandleConnectionClient{stream}
	return x, nil
}

type ManagerProxy_HandleConnectionClient interface {
	Send(*ConnectionChunk) error
	Recv() (*ConnectionChunk, error)
	grpc.ClientStream
}

type managerProxyHandleConnectionClient struct {
	grpc.ClientStream
}

func (x *managerProxyHandleConnectionClient) Send(m *ConnectionChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *managerProxyHandleConnectionClient) Recv() (*ConnectionChunk, error) {
	m := new(ConnectionChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerProxyServer is the server API for ManagerProxy service.
// All implementations must embed UnimplementedManagerProxyServer
// for forward compatibility
type ManagerProxyServer interface {
	// The first argument chunk must be an "intercept_id"; after that no
	// chunk may be an intercept_id.  System A calls this when it
	// recieves a connection to "XYZ.preview.edgestack.me", and that
	// domain belongs to an intercept that belongs to this manager.
	HandleConnection(ManagerProxy_HandleConnectionServer) error
	mustEmbedUnimplementedManagerProxyServer()
}

// UnimplementedManagerProxyServer must be embedded to have forward compatible implementations.
type UnimplementedManagerProxyServer struct {
}

func (UnimplementedManagerProxyServer) HandleConnection(ManagerProxy_HandleConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleConnection not implemented")
}
func (UnimplementedManagerProxyServer) mustEmbedUnimplementedManagerProxyServer() {}

// UnsafeManagerProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerProxyServer will
// result in compilation errors.
type UnsafeManagerProxyServer interface {
	mustEmbedUnimplementedManagerProxyServer()
}

func RegisterManagerProxyServer(s grpc.ServiceRegistrar, srv ManagerProxyServer) {
	s.RegisterService(&_ManagerProxy_serviceDesc, srv)
}

func _ManagerProxy_HandleConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagerProxyServer).HandleConnection(&managerProxyHandleConnectionServer{stream})
}

type ManagerProxy_HandleConnectionServer interface {
	Send(*ConnectionChunk) error
	Recv() (*ConnectionChunk, error)
	grpc.ServerStream
}

type managerProxyHandleConnectionServer struct {
	grpc.ServerStream
}

func (x *managerProxyHandleConnectionServer) Send(m *ConnectionChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *managerProxyHandleConnectionServer) Recv() (*ConnectionChunk, error) {
	m := new(ConnectionChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ManagerProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.systema2manager.ManagerProxy",
	HandlerType: (*ManagerProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleConnection",
			Handler:       _ManagerProxy_HandleConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/systema2manager/systema2manager.proto",
}
