// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: rpc/daemon/daemon.proto

package daemon

import (
	iptables "github.com/datawire/telepresence2/pkg/rpc/iptables"
	version "github.com/datawire/telepresence2/pkg/rpc/version"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PauseInfo_ErrType int32

const (
	PauseInfo_UNSPECIFIED            PauseInfo_ErrType = 0
	PauseInfo_ALREADY_PAUSED         PauseInfo_ErrType = 1
	PauseInfo_CONNECTED_TO_CLUSTER   PauseInfo_ErrType = 2
	PauseInfo_UNEXPECTED_PAUSE_ERROR PauseInfo_ErrType = 3
)

// Enum value maps for PauseInfo_ErrType.
var (
	PauseInfo_ErrType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ALREADY_PAUSED",
		2: "CONNECTED_TO_CLUSTER",
		3: "UNEXPECTED_PAUSE_ERROR",
	}
	PauseInfo_ErrType_value = map[string]int32{
		"UNSPECIFIED":            0,
		"ALREADY_PAUSED":         1,
		"CONNECTED_TO_CLUSTER":   2,
		"UNEXPECTED_PAUSE_ERROR": 3,
	}
)

func (x PauseInfo_ErrType) Enum() *PauseInfo_ErrType {
	p := new(PauseInfo_ErrType)
	*p = x
	return p
}

func (x PauseInfo_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PauseInfo_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_daemon_daemon_proto_enumTypes[0].Descriptor()
}

func (PauseInfo_ErrType) Type() protoreflect.EnumType {
	return &file_rpc_daemon_daemon_proto_enumTypes[0]
}

func (x PauseInfo_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PauseInfo_ErrType.Descriptor instead.
func (PauseInfo_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{1, 0}
}

type ResumeInfo_ErrType int32

const (
	ResumeInfo_UNSPECIFIED             ResumeInfo_ErrType = 0
	ResumeInfo_NOT_PAUSED              ResumeInfo_ErrType = 1
	ResumeInfo_REESTABLISHING          ResumeInfo_ErrType = 2
	ResumeInfo_UNEXPECTED_RESUME_ERROR ResumeInfo_ErrType = 3
)

// Enum value maps for ResumeInfo_ErrType.
var (
	ResumeInfo_ErrType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NOT_PAUSED",
		2: "REESTABLISHING",
		3: "UNEXPECTED_RESUME_ERROR",
	}
	ResumeInfo_ErrType_value = map[string]int32{
		"UNSPECIFIED":             0,
		"NOT_PAUSED":              1,
		"REESTABLISHING":          2,
		"UNEXPECTED_RESUME_ERROR": 3,
	}
)

func (x ResumeInfo_ErrType) Enum() *ResumeInfo_ErrType {
	p := new(ResumeInfo_ErrType)
	*p = x
	return p
}

func (x ResumeInfo_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResumeInfo_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_daemon_daemon_proto_enumTypes[1].Descriptor()
}

func (ResumeInfo_ErrType) Type() protoreflect.EnumType {
	return &file_rpc_daemon_daemon_proto_enumTypes[1]
}

func (x ResumeInfo_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResumeInfo_ErrType.Descriptor instead.
func (ResumeInfo_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{2, 0}
}

type DaemonStatus_ErrType int32

const (
	DaemonStatus_UNSPECIFIED DaemonStatus_ErrType = 0
	DaemonStatus_NOT_STARTED DaemonStatus_ErrType = 1
	DaemonStatus_PAUSED      DaemonStatus_ErrType = 2
	DaemonStatus_NO_NETWORK  DaemonStatus_ErrType = 3
)

// Enum value maps for DaemonStatus_ErrType.
var (
	DaemonStatus_ErrType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NOT_STARTED",
		2: "PAUSED",
		3: "NO_NETWORK",
	}
	DaemonStatus_ErrType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NOT_STARTED": 1,
		"PAUSED":      2,
		"NO_NETWORK":  3,
	}
)

func (x DaemonStatus_ErrType) Enum() *DaemonStatus_ErrType {
	p := new(DaemonStatus_ErrType)
	*p = x
	return p
}

func (x DaemonStatus_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaemonStatus_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_daemon_daemon_proto_enumTypes[2].Descriptor()
}

func (DaemonStatus_ErrType) Type() protoreflect.EnumType {
	return &file_rpc_daemon_daemon_proto_enumTypes[2]
}

func (x DaemonStatus_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaemonStatus_ErrType.Descriptor instead.
func (DaemonStatus_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{3, 0}
}

// LogMessage carries a message and a flag telling the service if the message
// is intended for debugging or more general info.
type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDebug bool   `protobuf:"varint,1,opt,name=is_debug,json=isDebug,proto3" json:"is_debug,omitempty"`
	Text    string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_daemon_daemon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_daemon_daemon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{0}
}

func (x *LogMessage) GetIsDebug() bool {
	if x != nil {
		return x.IsDebug
	}
	return false
}

func (x *LogMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type PauseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     PauseInfo_ErrType `protobuf:"varint,1,opt,name=error,proto3,enum=telepresence.PauseInfo_ErrType" json:"error,omitempty"`
	ErrorText string            `protobuf:"bytes,2,opt,name=error_text,json=errorText,proto3" json:"error_text,omitempty"`
}

func (x *PauseInfo) Reset() {
	*x = PauseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_daemon_daemon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseInfo) ProtoMessage() {}

func (x *PauseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_daemon_daemon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseInfo.ProtoReflect.Descriptor instead.
func (*PauseInfo) Descriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{1}
}

func (x *PauseInfo) GetError() PauseInfo_ErrType {
	if x != nil {
		return x.Error
	}
	return PauseInfo_UNSPECIFIED
}

func (x *PauseInfo) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type ResumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     ResumeInfo_ErrType `protobuf:"varint,1,opt,name=error,proto3,enum=telepresence.ResumeInfo_ErrType" json:"error,omitempty"`
	ErrorText string             `protobuf:"bytes,2,opt,name=error_text,json=errorText,proto3" json:"error_text,omitempty"`
}

func (x *ResumeInfo) Reset() {
	*x = ResumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_daemon_daemon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeInfo) ProtoMessage() {}

func (x *ResumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_daemon_daemon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeInfo.ProtoReflect.Descriptor instead.
func (*ResumeInfo) Descriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{2}
}

func (x *ResumeInfo) GetError() ResumeInfo_ErrType {
	if x != nil {
		return x.Error
	}
	return ResumeInfo_UNSPECIFIED
}

func (x *ResumeInfo) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type DaemonStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error DaemonStatus_ErrType `protobuf:"varint,1,opt,name=error,proto3,enum=telepresence.DaemonStatus_ErrType" json:"error,omitempty"`
}

func (x *DaemonStatus) Reset() {
	*x = DaemonStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_daemon_daemon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonStatus) ProtoMessage() {}

func (x *DaemonStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_daemon_daemon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonStatus.ProtoReflect.Descriptor instead.
func (*DaemonStatus) Descriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{3}
}

func (x *DaemonStatus) GetError() DaemonStatus_ErrType {
	if x != nil {
		return x.Error
	}
	return DaemonStatus_UNSPECIFIED
}

type Paths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Paths) Reset() {
	*x = Paths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_daemon_daemon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paths) ProtoMessage() {}

func (x *Paths) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_daemon_daemon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paths.ProtoReflect.Descriptor instead.
func (*Paths) Descriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{4}
}

func (x *Paths) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Tables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*iptables.Table `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *Tables) Reset() {
	*x = Tables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_daemon_daemon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tables) ProtoMessage() {}

func (x *Tables) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_daemon_daemon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tables.ProtoReflect.Descriptor instead.
func (*Tables) Descriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{5}
}

func (x *Tables) GetTables() []*iptables.Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

type TableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TableName) Reset() {
	*x = TableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_daemon_daemon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableName) ProtoMessage() {}

func (x *TableName) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_daemon_daemon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableName.ProtoReflect.Descriptor instead.
func (*TableName) Descriptor() ([]byte, []int) {
	return file_rpc_daemon_daemon_proto_rawDescGZIP(), []int{6}
}

func (x *TableName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_rpc_daemon_daemon_proto protoreflect.FileDescriptor

var file_rpc_daemon_daemon_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x77, 0x69, 0x72, 0x65, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x32, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x69,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x77, 0x69, 0x72, 0x65, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x32, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3b, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc7, 0x01,
	0x0a, 0x09, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x64, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x55,
	0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5b, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x45,
	0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x47, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x22, 0x1d,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x31, 0x0a,
	0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0x1f, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0xd1, 0x05, 0x0a, 0x06, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x14, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x18, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x40, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x33, 0x0a, 0x07, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0f, 0x2e, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x49, 0x50, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e,
	0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x13, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x5a, 0x0a, 0x1c, 0x69, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x06, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x77, 0x69, 0x72, 0x65, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_daemon_daemon_proto_rawDescOnce sync.Once
	file_rpc_daemon_daemon_proto_rawDescData = file_rpc_daemon_daemon_proto_rawDesc
)

func file_rpc_daemon_daemon_proto_rawDescGZIP() []byte {
	file_rpc_daemon_daemon_proto_rawDescOnce.Do(func() {
		file_rpc_daemon_daemon_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_daemon_daemon_proto_rawDescData)
	})
	return file_rpc_daemon_daemon_proto_rawDescData
}

var file_rpc_daemon_daemon_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rpc_daemon_daemon_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_rpc_daemon_daemon_proto_goTypes = []interface{}{
	(PauseInfo_ErrType)(0),      // 0: telepresence.PauseInfo.ErrType
	(ResumeInfo_ErrType)(0),     // 1: telepresence.ResumeInfo.ErrType
	(DaemonStatus_ErrType)(0),   // 2: telepresence.DaemonStatus.ErrType
	(*LogMessage)(nil),          // 3: telepresence.LogMessage
	(*PauseInfo)(nil),           // 4: telepresence.PauseInfo
	(*ResumeInfo)(nil),          // 5: telepresence.ResumeInfo
	(*DaemonStatus)(nil),        // 6: telepresence.DaemonStatus
	(*Paths)(nil),               // 7: telepresence.Paths
	(*Tables)(nil),              // 8: telepresence.Tables
	(*TableName)(nil),           // 9: telepresence.TableName
	(*iptables.Table)(nil),      // 10: iptables.Table
	(*empty.Empty)(nil),         // 11: google.protobuf.Empty
	(*version.VersionInfo)(nil), // 12: version.VersionInfo
}
var file_rpc_daemon_daemon_proto_depIdxs = []int32{
	0,  // 0: telepresence.PauseInfo.error:type_name -> telepresence.PauseInfo.ErrType
	1,  // 1: telepresence.ResumeInfo.error:type_name -> telepresence.ResumeInfo.ErrType
	2,  // 2: telepresence.DaemonStatus.error:type_name -> telepresence.DaemonStatus.ErrType
	10, // 3: telepresence.Tables.tables:type_name -> iptables.Table
	11, // 4: telepresence.Daemon.Version:input_type -> google.protobuf.Empty
	11, // 5: telepresence.Daemon.Status:input_type -> google.protobuf.Empty
	11, // 6: telepresence.Daemon.Pause:input_type -> google.protobuf.Empty
	11, // 7: telepresence.Daemon.Resume:input_type -> google.protobuf.Empty
	3,  // 8: telepresence.Daemon.Logger:input_type -> telepresence.LogMessage
	11, // 9: telepresence.Daemon.Quit:input_type -> google.protobuf.Empty
	9,  // 10: telepresence.Daemon.DeleteIPTable:input_type -> telepresence.TableName
	9,  // 11: telepresence.Daemon.IPTable:input_type -> telepresence.TableName
	11, // 12: telepresence.Daemon.AllIPTables:input_type -> google.protobuf.Empty
	10, // 13: telepresence.Daemon.Update:input_type -> iptables.Table
	11, // 14: telepresence.Daemon.DnsSearchPath:input_type -> google.protobuf.Empty
	7,  // 15: telepresence.Daemon.SetDnsSearchPath:input_type -> telepresence.Paths
	12, // 16: telepresence.Daemon.Version:output_type -> version.VersionInfo
	6,  // 17: telepresence.Daemon.Status:output_type -> telepresence.DaemonStatus
	4,  // 18: telepresence.Daemon.Pause:output_type -> telepresence.PauseInfo
	5,  // 19: telepresence.Daemon.Resume:output_type -> telepresence.ResumeInfo
	11, // 20: telepresence.Daemon.Logger:output_type -> google.protobuf.Empty
	11, // 21: telepresence.Daemon.Quit:output_type -> google.protobuf.Empty
	11, // 22: telepresence.Daemon.DeleteIPTable:output_type -> google.protobuf.Empty
	10, // 23: telepresence.Daemon.IPTable:output_type -> iptables.Table
	8,  // 24: telepresence.Daemon.AllIPTables:output_type -> telepresence.Tables
	11, // 25: telepresence.Daemon.Update:output_type -> google.protobuf.Empty
	7,  // 26: telepresence.Daemon.DnsSearchPath:output_type -> telepresence.Paths
	11, // 27: telepresence.Daemon.SetDnsSearchPath:output_type -> google.protobuf.Empty
	16, // [16:28] is the sub-list for method output_type
	4,  // [4:16] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_rpc_daemon_daemon_proto_init() }
func file_rpc_daemon_daemon_proto_init() {
	if File_rpc_daemon_daemon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_daemon_daemon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_daemon_daemon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_daemon_daemon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_daemon_daemon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_daemon_daemon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_daemon_daemon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_daemon_daemon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_daemon_daemon_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_daemon_daemon_proto_goTypes,
		DependencyIndexes: file_rpc_daemon_daemon_proto_depIdxs,
		EnumInfos:         file_rpc_daemon_daemon_proto_enumTypes,
		MessageInfos:      file_rpc_daemon_daemon_proto_msgTypes,
	}.Build()
	File_rpc_daemon_daemon_proto = out.File
	file_rpc_daemon_daemon_proto_rawDesc = nil
	file_rpc_daemon_daemon_proto_goTypes = nil
	file_rpc_daemon_daemon_proto_depIdxs = nil
}
