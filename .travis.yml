language: python
sudo: required

# Run on Linux and OS X:
matrix:
  include:
    - os: linux
      dist: trusty
    - os: osx
      language: generic

# Cache gcloud SDK across runs; this requires master to have builds:
cache:
  directories:
    - "$HOME/google-cloud-sdk/"

# Environment variables:
env:
  global:
    - PROJECT_NAME=datawireio
    - CLUSTER_NAME=telepresence-testing
    - CLOUDSDK_COMPUTE_ZONE=us-central1-a

# Only build master branch (all PRs will be built):
branches:
  only:
    - master

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew cask install osxfuse; brew install python3 homebrew/fuse/sshfs; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt install sshfs; fi
  # Record some debugging info:
  - python --version
  - python2 --version
  - python3 --version
  # Decrypt the service key:
  - openssl aes-256-cbc -K $encrypted_6168b41c1bb0_key -iv $encrypted_6168b41c1bb0_iv -in gcloud-service-key.json.enc -out gcloud-service-key.json -d
  # Make sure gcloud is installed:
  - ./ci/setup-gcloud.sh
  # Make sure torsocks is installed:
  - ./ci/build-torsocks.sh

install:
  # Push Docker images to Google Container Registry; on OS X we don't bother, we
  # just hope that the parallel Linux job finished building and pushing first...
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then ./ci/push-images.sh; fi
  
script:
  - make virtualenv
  - export TELEPRESENCE_VERSION=$(make version)
  - export TELEPRESENCE_REGISTRY=gcr.io/${PROJECT_NAME}
  - export PATH=$HOME/google-cloud-sdk/bin:$PATH
  # Magic incantation to make kubectl work, because apparently gcloud can't do that correctly (see https://github.com/kubernetes/kubernetes/issues/30617)
  - export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcloud-service-key.json
  - ./ci/test.sh
