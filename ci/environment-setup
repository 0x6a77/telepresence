#!/usr/bin/env bash

# Prepare a development environment for running telepresence and its test
# suite.  These steps should typically only be required once to prepare the
# environment.

if [ "$#" -ne 4 ]; then
	echo "Usage: $0 <gcloud project name> <gcloud cluster name> <gcloud compute zone> <linux|osx>"
	echo "  (See .circleci/config.yml for sample values)"
	exit 1
fi

set -ex

PROJECT_NAME=$1
CLUSTER_NAME=$2
CLOUDSDK_COMPUTE_ZONE=$3
OS=$4

case "$OS" in
	osx)
		brew update > /dev/null
		if ! type sshfs &>/dev/null; then
			brew cask install osxfuse
			brew install sshfs
		fi
		if ! type python3 &>/dev/null || ! type pip3 &>/dev/null; then
			brew install python3 || brew upgrade python
		fi
		if ! type virtualenv &>/dev/null; then
			pip3 install virtualenv
		fi
		if ! type gcloud; then
			./ci/install-gcloud "$OS"
		fi
		if ! type kubectl; then
			./ci/install-kubectl "$OS"
		fi
		if ! type torsocks &>/dev/null; then
			./ci/install-torsocks "$OS"
		fi
		;;

	linux)
		if ! type sshfs &>/dev/null; then
			sudo apt-get install sshfs
		fi
		if ! type conntrack &>/dev/null; then
			sudo apt-get install conntrack
		fi
		if ! type gcloud &>/dev/null; then
			sudo apt-get install lsb-release
			./ci/install-gcloud "$OS"
		fi
		if ! type kubectl; then
			./ci/install-kubectl "$OS"
		fi
		if ! type torsocks &>/dev/null; then
			./ci/install-torsocks "$OS"
		fi
		;;

	*)
		echo "Unknown platform."
		exit 1
esac

# Record some debugging info:
python --version
python2 --version || true
python3 --version
ruby --version || true
docker version || true

./tools/setup-gcloud "$PROJECT_NAME" "$CLUSTER_NAME" "$CLOUDSDK_COMPUTE_ZONE"
