#!/usr/bin/env python
"""
Telepresence CLI tool, a thin wrapper around the
datawire/telepresence-local Docker image.

Should be written to support Python 2 and Python 3 for ease of distribution.
"""

from __future__ import print_function

import argparse
import atexit
import os
import os.path
import signal
import sys
from functools import wraps
from subprocess import check_output, Popen
from tempfile import mkdtemp
from time import sleep
from traceback import print_exc
import webbrowser
if sys.version_info.major == 2:
    from urllib import quote_plus
    from StringIO import StringIO
    input = __builtins__.raw_input
else:
    # Python 3
    from io import StringIO
    from urllib.parse import quote_plus
    unicode = str

__version__ = "0.7"


def parse_args():
    """Create a new ArgumentParser and parse sys.argv."""
    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version', version=__version__)
    group_deployment = parser.add_mutually_exclusive_group(required=True)
    group_deployment.add_argument(
        "--deployment",
        help=("The name of the Kubernetes Deployment where the " +
              "datawire/telepresence-k8s image is running."))
    group_deployment.add_argument(
        '--new-deployment',
        dest="new_deployment",
        help=("Create a new Deployment in Kubernetes where the "
              "datawire/telepresence-k8s image will run."))
    parser.add_argument(
        "--expose",
        type=int,
        action='append',
        default=[],
        help=("Port number in local container that will be " +
              "exposed to Kubernetes."))
    parser.add_argument(
        "--proxy",
        action='append',
        default=[],
        help="<host>:<port> that will be proxied via Kubernetes.")
    parser.add_argument(
        "--docker-run",
        dest="docker_run_args",
        required=True,
        metavar="DOCKER-RUN-ARGUMENTS",
        nargs=argparse.REMAINDER,
        help=("All remaininding arguments, to be passed to "
              "`docker run`, e.g. '-i -t alpine:3.5 /bin/sh'."))
    return parser.parse_args()


def maybe_sudo(args):
    docker_path = "/var/run/docker.sock"
    if (os.path.exists(docker_path) and not os.access(docker_path, os.W_OK)):
        return ["sudo"] + args
    else:
        return args


def stop_proxy(container_id):
    if sys.stderr.isatty():
        print("Shutting proxy down...", file=sys.stderr)
    stop_container(container_id)


def stop_container(container_id):
    if container_id in check_output(
            maybe_sudo(["docker", "ps", "-q", "--no-trunc"])):
        check_output(maybe_sudo(["docker", "stop", container_id]))


def start_proxy(args):
    """`telepresence start`."""
    if sys.stderr.isatty():
        print("Starting proxy...", file=sys.stderr)
    if args.deployment is None:
        # This implies --new-deployment:
        args.deployment = args.new_deployment

        def remove_existing_deployment():
            check_output([
                "kubectl", "delete", "--ignore-not-found",
                "service,deployment", args.deployment
            ])

        atexit.register(remove_existing_deployment)
        remove_existing_deployment()
        command = [
            "kubectl", "run", "--generator", "deployment/v1beta1",
            args.deployment, "--image=datawire/telepresence-k8s:" + __version__
        ]
        for port in args.expose:
            command.append("--port={}".format(port))
        if args.expose:
            command.append("--expose")
        check_output(command)
        sleep(5)  # XXX oh god

    home_path = os.path.expanduser("~")
    docker_cmd = maybe_sudo([
        "docker",
        "run",
        # Run in background:
        "--detach",
        # Delete when exited:
        "--rm",
        # Mount $HOME so we have access to kubectl configuration:
        "-v",
        home_path + ":/opt:ro",
        # Minikube looks in absolute path for home, so also mount in way that
        # matches host path:
        "-v",
        "{}:{}:ro".format(home_path, home_path),
    ])

    tempdir = mkdtemp()

    docker_cmd.extend([
        # Mount local directory, where env file will be written out:
        "-v",
        tempdir + ":/output",
        # Name of container:
        "datawire/telepresence-local:" + __version__,
        # Arguments: <uid>, <deployment-name>
        str(os.getuid()),
        args.deployment,
        # Arguments: <port1,port2>, <proxy1,proxy2>...
        ",".join(map(str, args.expose)),
        ",".join(args.proxy)
    ])
    container_id = unicode(check_output(docker_cmd).strip(), "utf-8")
    atexit.register(stop_proxy, container_id)
    return tempdir, container_id


def run_local_command(args, tempdir, container_id):
    """`telepresence run-local`."""
    # XXX argparse sucks need to switch to something else
    if args.docker_run_args and args.docker_run_args[0] == "--":
        args.docker_run_args.pop(0)
    # Wait for proxy container to write out env file, indicating we're good to
    # go:
    out_env = os.path.join(tempdir, "out.env")
    while not os.path.exists(out_env):
        sleep(1)
    if sys.stderr.isatty():
        print("Starting local container...", file=sys.stderr)
    command = maybe_sudo([
        "docker",
        "run",
        # Use network namespace of telepresence-local container:
        "--net=container:" + container_id,
        # Use environment variables written out from telepresence-local, to
        # match Kubernets:
        "--env-file={}".format(out_env),
        # Set a label so we can easily find this container later:
        "--label",
        "telepresence-container=" + container_id,
    ]) + args.docker_run_args
    p = Popen(command)

    def terminate_if_alive():
        cid = unicode(
            check_output(
                maybe_sudo([
                    "docker", "ps", "-q", "--filter",
                    "label=telepresence-container=" + container_id
                ])), "utf-8").strip()
        stop_container(cid)

    atexit.register(terminate_if_alive)
    p.wait()


BUG_REPORT_TEMPLATE = u"""\
### What were you trying to do?

(please tell us)

### What did you expect to happen?

(please tell us)

### What happened instead?

(please tell us - the traceback is automatically included, see below)

### Automatically included information

Command line: `{}`
Version: `{}`
Python version: `{}`
OS: `{}`
Traceback:

```
{}
```
"""


def handle_unexpected_errors(f):
    """Decorator that catches unexpected errors."""

    @wraps(f)
    def call_f(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except KeyboardInterrupt:
            raise SystemExit(0)
        except Exception as e:
            errorf = StringIO()
            print_exc(file=errorf)
            error = errorf.getvalue()
            print(
                "\nLooks like there's a bug in our code. Sorry about that!\n\n"
                "Here's the traceback:\n\n" + error + "\n")
            if input(
                    "Would you like to file an issue in our issue tracker?"
                    " We'd really appreciate the help improving our product. "
                    "[Y/n]: ", ).lower() in ("y", ""):
                url = (
                    "https://github.com/datawire/telepresence/issues/new?body="
                )
                body = quote_plus(
                    BUG_REPORT_TEMPLATE.format(
                        sys.argv, __version__, sys.version,
                        unicode(check_output(["uname", "-a"]),
                                "utf-8"), error))
                webbrowser.open_new(url + body)
            else:
                raise SystemExit(1)

    return call_f


def main():
    # Make SIGTERM do clean shutdown (in particular, we want atexit functions
    # to be called):
    def shutdown(signum, frame):
        raise SystemExit(0)

    signal.signal(signal.SIGTERM, shutdown)

    args = parse_args()

    @handle_unexpected_errors
    def go():
        tempdir, container_id = start_proxy(args)
        run_local_command(args, tempdir, container_id)

    go()


if __name__ == '__main__':
    main()
