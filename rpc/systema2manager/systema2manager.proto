syntax = "proto3";

// systema2manager deals with the calls that the System A cloud
// service makes to the in-cluster Telepresence manager.
package telepresence.systema2manager;

import "google/protobuf/empty.proto";

// I went ahead and duplicated things from other protobuf files here, so that
// the two teams can heckle over it without us worrying about the rest
// of Telepresence.

// Calls from System A to the manager need not be authenticated
// because they are happening over a connection created by the manager
// calling "SystemA.ReverseConnection"; all authentication happened by
// the manager authenticating to System A.
service Manager {
  // Returns a list of currently active intercepts.
  rpc ListIntercepts(google.protobuf.Empty) returns (manager.InterceptInfoSnapshot);

  // RemoveIntercept lets a client remove an intercept.
  rpc RemoveIntercept(RemoveInterceptRequest) returns (google.protobuf.Empty);

  // The first argument chunk must be an "intercept_id"; after that no
  // chunk may be an intercept_id.  System A calls this when it
  // recieves a connection to "XYZ.preview.edgestack.me", and that
  // domain belongs to an intercept that belongs to this manager.
  rpc HandleConnection(stream ConnectionChunk) returns (stream ConnectionChunk);
}

message ConnectionChunk {
  oneOf {
    string intercept_id = 1;
    Chunk  chunk = 2;
    string error = 3; // TODO: Probably have a better error type
  }
}

message RemoveInterceptRequest {
  SessionInfo session = 1;
  string name = 2;
}

message InterceptInfoSnapshot {
  repeated InterceptInfo intercepts = 1;
}

message InterceptInfo {
  InterceptSpec spec = 1;
  int32 manager_port = 2;
  InterceptDispositionType disposition = 3;
  string message = 4;
  string id = 5;
}

message InterceptSpec {
  string name = 1;
  string client = 2;

  string agent = 3;
  string mechanism = 4;

  // additional mechanism-specific info
  // - header match patterns would go here
  // - perhaps a JSON blob for the Agent's mechanism implementation to parse
  // - how does the client decide to create this blob?
  // - perhaps just pass all the unrecognized CLI arguments? or all of them?
  // - maybe always pass client's install id to use for x-service-preview matches?
  string additional = 5;

  string target_host = 6;
  int32 target_port = 7;
}

enum InterceptDispositionType {
  UNSPECIFIED = 0;

  ACTIVE = 1;
  WAITING = 2;

  // Failure states

  NO_CLIENT = 3;
  NO_AGENT = 4;
  NO_MECHANISM = 5;
  NO_PORTS = 6;
  AGENT_ERROR = 7;
}
