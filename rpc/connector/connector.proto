syntax = "proto3";
package telepresence;
import "github.com/datawire/telepresence2/rpc/version/version.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/datawire/telepresence2/pkg/rpc/connector";
option java_multiple_files = true;
option java_package = "io.datawire.telepresence.rpc";
option java_outer_classname = "Connector";

// The Connector service is responsible for connecting to the traffic manager
// and manage intercepts. It can only run when a Daemon is running.
service Connector {
  // Returns version information from the Connector
  rpc Version(google.protobuf.Empty) returns (version.VersionInfo);

  // Returns the current connectivity status
  rpc Status(google.protobuf.Empty) returns (ConnectorStatus);

  // Connects the daemon to a cluster
  rpc Connect(ConnectRequest) returns (ConnectInfo);

  // Adds a deployment intercept
  rpc AddIntercept(InterceptRequest) returns (Intercept);

  // Deactivates and removes an existent deployment intercept.
  rpc RemoveIntercept(RemoveInterceptRequest) returns (Intercept);

  // Returns a list of deployments available for intercept.
  rpc AvailableIntercepts(google.protobuf.Empty) returns (AvailableInterceptList);

  // Returns a list of currently active intercepts.
  rpc ListIntercepts(google.protobuf.Empty) returns (InterceptList);

  // Quits (terminates) the service.
  rpc Quit(google.protobuf.Empty) returns (google.protobuf.Empty);
}

// ConnectRequest contains the information needed to connect ot a cluster.
message ConnectRequest {
  string context = 1;
  string namespace = 2;
  string manager_ns = 3;
  string install_id = 4;
  repeated string args = 5;

  // true if this is part of a CI run
  bool is_ci = 6;

  // true if the call must wait for a running traffic manager before returning
  bool intercept_enabled = 7;
}

message ConnectInfo {
  enum ErrType {
    UNSPECIFIED = 0;
    ALREADY_CONNECTED = 1;
    DISCONNECTING = 2;
    CLUSTER_FAILED = 3;
    BRIDGE_FAILED = 4;
    TRAFFIC_MANAGER_FAILED = 5;
  }
  ErrType error = 1;
  string error_text = 2;
  string cluster_context = 3;
  string cluster_server = 4;
}

message ConnectorStatus {
  enum ErrType {
    UNSPECIFIED = 0;
    NOT_STARTED = 1;
    DISCONNECTED = 2;
  }
  ErrType error = 1;
  string error_text = 2;
  bool bridge = 3;

  message ClusterInfo {
    bool connected = 1;
    string server = 2;
    string context = 3;
  }
  ClusterInfo cluster = 4;

  message InterceptsInfo {
    bool connected = 1;
    int32 interceptable_count = 2;
    int32 cluster_intercepts = 3;
    int32 local_intercepts = 4;
    string license_info = 5;
  }
  InterceptsInfo intercepts = 5;
}

// InterceptRequest contains the information needed to add a deployment
// intercept.
message InterceptRequest {
  // Name of the intercept
  string name = 1;

  // Namespace in which to create the Intercept mapping
  string namespace = 2;

  // Name of the deployment being intercepted
  string deployment = 3;

  // Prefix to intercept (default /)
  string prefix = 4;

  string target_host = 5;

  int32 target_port = 6;

  // GRPC flag to set on the Intercept mapping. Ideally we'd get this from the
  // Traffic-Manager interceptables instead of having to pass it as a CLI
  // argument.
  bool grpc = 7;

  bool preview = 8;

  map<string, string> patterns = 9;
}

message RemoveInterceptRequest {
  // Name of the intercept
  string name = 1;
}

// InterceptError is a common error type used by the intercept call family (add,
// remove, list, available).
enum InterceptError {
  UNSPECIFIED = 0;
  NO_PREVIEW_HOST = 1;
  NO_CONNECTION = 2;
  NO_TRAFFIC_MANAGER = 3;
  TRAFFIC_MANAGER_CONNECTING = 4;
  TRAFFIC_MANAGER_ERROR = 5;
  ALREADY_EXISTS = 6;
  NO_ACCEPTABLE_DEPLOYMENT = 7;
  AMBIGUOUS_MATCH = 8;
  FAILED_TO_ESTABLISH = 9;
  FAILED_TO_REMOVE = 10;
  NOT_FOUND = 11;
}

message Intercept {
  InterceptError error = 1;
  string preview_url = 2;
  string text = 3;
}

message InterceptList {
  InterceptError error = 1;
  string text = 2;

  message ListEntry {
    string name = 1;
    string namespace = 2;
    string deployment = 3;
    string preview_url = 4;
    map<string, string> patterns = 5;
    string target_host = 6;
    int32 target_port = 7;
  }
  repeated ListEntry intercepts = 3;
}

message AvailableInterceptList {
  InterceptError error = 1;
  string text = 2;

  message ListEntry {
    string namespace = 1;
    string deployment = 2;
  }
  repeated ListEntry intercepts = 3;
}
