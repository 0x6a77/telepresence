syntax = "proto3";
package telepresence.connector;

import "google/protobuf/empty.proto";
import "rpc/manager/manager.proto";
import "rpc/version/version.proto";

option go_package = "github.com/datawire/telepresence2/pkg/rpc/connector";

// The Connector service is responsible for connecting to the traffic manager
// and manage intercepts. It can only run when a Daemon is running.
service Connector {
  // Returns version information from the Connector
  rpc Version(google.protobuf.Empty) returns (telepresence.version.VersionInfo);

  // Returns the current connectivity status
  rpc Status(google.protobuf.Empty) returns (ConnectorStatus);

  // Connects the daemon to a cluster
  rpc Connect(ConnectRequest) returns (ConnectInfo);

  // Adds a deployment intercept
  rpc CreateIntercept(telepresence.manager.CreateInterceptRequest) returns (InterceptResult);

  // Deactivates and removes an existent deployment intercept.
  rpc RemoveIntercept(telepresence.manager.RemoveInterceptRequest2) returns (InterceptResult);

  // Returns a list of deployments available for intercept.
  rpc AvailableIntercepts(google.protobuf.Empty) returns (telepresence.manager.AgentInfoSnapshot);

  // Returns a list of currently active intercepts.
  rpc ListIntercepts(google.protobuf.Empty) returns (telepresence.manager.InterceptInfoSnapshot);

  // Quits (terminates) the service.
  rpc Quit(google.protobuf.Empty) returns (google.protobuf.Empty);
}

// ConnectRequest contains the information needed to connect ot a cluster.
message ConnectRequest {
  string context = 1;
  string namespace = 2;
  string install_id = 3;
  repeated string args = 4;

  // true if this is part of a CI run
  bool is_ci = 5;

  // true if the call must wait for a running traffic manager before returning
  bool intercept_enabled = 6;
}

message ConnectInfo {
  enum ErrType {
    UNSPECIFIED = 0;
    ALREADY_CONNECTED = 1;
    DISCONNECTING = 2;
    CLUSTER_FAILED = 3;
    BRIDGE_FAILED = 4;
    TRAFFIC_MANAGER_FAILED = 5;
  }
  ErrType error = 1;
  string error_text = 2;
  string cluster_context = 3;
  string cluster_server = 4;
}

message ConnectorStatus {
  enum ErrType {
    UNSPECIFIED = 0;
    NOT_STARTED = 1;
    DISCONNECTED = 2;
  }
  ErrType error = 1;
  string error_text = 2;
  bool bridge = 3;

  message ClusterInfo {
    bool connected = 1;
    string server = 2;
    string context = 3;
  }
  ClusterInfo cluster = 4;

  telepresence.manager.AgentInfoSnapshot agents = 5;
  telepresence.manager.InterceptInfoSnapshot intercepts = 6;
}

// InterceptError is a common error type used by the intercept call family (add,
// remove, list, available).
enum InterceptError {
  UNSPECIFIED = 0;
  NO_PREVIEW_HOST = 1;
  NO_CONNECTION = 2;
  NO_TRAFFIC_MANAGER = 3;
  TRAFFIC_MANAGER_CONNECTING = 4;
  TRAFFIC_MANAGER_ERROR = 5;
  ALREADY_EXISTS = 6;
  NO_ACCEPTABLE_DEPLOYMENT = 7;
  AMBIGUOUS_MATCH = 8;
  FAILED_TO_ESTABLISH = 9;
  FAILED_TO_REMOVE = 10;
  NOT_FOUND = 11;
}

message InterceptResult {
  telepresence.manager.InterceptInfo intercept_info = 1;
  InterceptError error = 2;
  string error_text = 3;
}
