syntax = "proto3";
package telepresence.connector;

import "google/protobuf/empty.proto";
import "rpc/common/version.proto";
import "rpc/manager/manager.proto";

option go_package = "github.com/datawire/telepresence2/pkg/rpc/connector";

// The Connector service is responsible for connecting to the traffic manager
// and manage intercepts. It can only run when a Daemon is running.
service Connector {
  // Returns version information from the Connector
  rpc Version(google.protobuf.Empty) returns (telepresence.common.VersionInfo);

  // Connects the daemon to a cluster and returns status
  rpc Connect(ConnectRequest) returns (ConnectInfo);

  // Adds a deployment intercept
  rpc CreateIntercept(telepresence.manager.CreateInterceptRequest) returns (InterceptResult);

  // Deactivates and removes an existent deployment intercept.
  rpc RemoveIntercept(telepresence.manager.RemoveInterceptRequest2) returns (InterceptResult);

  // Uninstalls traffic-agents and traffic-manager from the cluster.
  rpc Uninstall(UninstallRequest) returns (UninstallResult);

  // Returns a list of deployments and their current intercept status.
  rpc List(ListRequest) returns (DeploymentInfoSnapshot);

  // Quits (terminates) the service.
  rpc Quit(google.protobuf.Empty) returns (google.protobuf.Empty);
}

// ConnectRequest contains the information needed to connect ot a cluster.
message ConnectRequest {
  map<string, string> kubeflags = 1;
  string install_id = 2;
}

message ConnectInfo {
  enum ErrType {
    UNSPECIFIED = 0;
    NOT_STARTED = 1;
    ALREADY_CONNECTED = 2;
    DISCONNECTING = 3;
    CLUSTER_FAILED = 4;
    BRIDGE_FAILED = 5;
    TRAFFIC_MANAGER_FAILED = 6;
  }
  ErrType error = 1;
  string error_text = 2;
  string cluster_server = 3;
  string cluster_context = 4;
  bool bridge_ok = 5;
  bool cluster_ok = 6;

  telepresence.manager.AgentInfoSnapshot agents = 7;
  telepresence.manager.InterceptInfoSnapshot intercepts = 8;
  repeated manager.IngressInfo ingress_infos = 9;
}

message UninstallRequest {
  enum UninstallType {
    UNSPECIFIED = 0;

    // Uninstalls an agent from the named deployments
    NAMED_AGENTS = 1;

    // Uninstalls all agents
    ALL_AGENTS = 2;

    // Uninstalls all agents and the traffic-manager
    EVERYTHING = 3;
  }

  UninstallType uninstall_type = 1;
  repeated string agents = 2;
}

message UninstallResult {
  string error_text = 1;
}

// InterceptError is a common error type used by the intercept call family (add,
// remove, list, available).
enum InterceptError {
  UNSPECIFIED = 0;
  NO_PREVIEW_HOST = 1;
  NO_CONNECTION = 2;
  NO_TRAFFIC_MANAGER = 3;
  TRAFFIC_MANAGER_CONNECTING = 4;
  TRAFFIC_MANAGER_ERROR = 5;
  ALREADY_EXISTS = 6;
  LOCAL_TARGET_IN_USE = 7;
  NO_ACCEPTABLE_DEPLOYMENT = 8;
  AMBIGUOUS_MATCH = 9;
  FAILED_TO_ESTABLISH = 10;
  FAILED_TO_REMOVE = 11;
  NOT_FOUND = 12;
}

message ListRequest {
  enum Filter {
    UNSPECIFIED = 0;
    INTERCEPTS = 1;
    INSTALLED_AGENTS = 2;
    INTERCEPTABLE = 3;
    EVERYTHING = 4;
  }
  Filter filter = 1;
}

// DeploymentInfo contains information about a deployment
message DeploymentInfo {
  // Name of deployment
  string name = 1;

  // Reason why deployment cannot be intercepted, or empty if it can.
  string not_interceptable_reason = 2;

  // AgentInfo reported from the traffic manager in case the deployment has a traffic-agent installed
  telepresence.manager.AgentInfo agent_info = 3;

  // InterceptInfo reported from the traffic manager in case the deployment is currently intercepted
  telepresence.manager.InterceptInfo intercept_info = 4;
}

message DeploymentInfoSnapshot {
  repeated DeploymentInfo deployments = 1;
}

message InterceptResult {
  telepresence.manager.InterceptInfo intercept_info = 1;
  InterceptError error = 2;
  string error_text = 3;
}
