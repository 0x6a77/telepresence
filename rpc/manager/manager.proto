syntax = "proto3";

package telepresence.manager;

import "google/protobuf/empty.proto";

option go_package = "github.com/datawire/telepresence2/pkg/rpc/manager";

message ClientInfo {
  string name = 1;  // user@hostname
  string install_id = 2;
  string product = 3;  // "telepresence"
  string version = 4;
  string license_key = 5;
}

message AgentInfo {
  string name = 1; // namespace/name of the Deployment
  string hostname = 2;
  string product = 3; // distinguish open source, our closed source, someone else's thing
  string version = 4;

  message Mechanism {
    string name = 1; // "tcp" or "http" or "grpc" or ...
    string product = 2; // distinguish open source, our closed source, someone else's thing
    string version = 3;
  }

  repeated Mechanism mechanisms = 5;
}

message InterceptSpec {
  string name = 1;
  string client = 2;

  string agent = 3;
  string mechanism = 4;

  /*
     additional mechanism-specific info
     - header match patterns would go here
     - perhaps a JSON blob for the Agent's mechanism implementation to parse
     - how does the client decide to create this blob?
     - perhaps just pass all the unrecognized CLI arguments? or all of them?
     - maybe always pass client's install id to use for x-service-preview matches?
   */
  string additional = 5;

  string target_host = 6;
  int32 target_port = 7;
}

enum InterceptDispositionType {
  UNSPECIFIED = 0;

  ACTIVE = 1;
  WAITING = 2;

  // Failure states

  NO_CLIENT = 3;
  NO_AGENT = 4;
  NO_MECHANISM = 5;
  NO_PORTS = 6;
  AGENT_ERROR = 7;
}


message InterceptInfo {
  InterceptSpec spec = 1;
  int32 manager_port = 2;
  InterceptDispositionType disposition = 3;
  string message = 4;
  string id = 5;
}

message SessionInfo {
  string session_id = 1;
}

message AgentInfoSnapshot {
  repeated AgentInfo agents = 1;
}

message InterceptInfoSnapshot {
  repeated InterceptInfo intercepts = 1;
}

message CreateInterceptRequest {
  SessionInfo session = 1;
  InterceptSpec intercept_spec = 2;
}

message RemoveInterceptRequest2 {
  SessionInfo session = 1;
  string name = 2;
}

message ReviewInterceptRequest {
  SessionInfo session = 1;
  string id = 2;
  InterceptDispositionType disposition = 3;
  string message = 4;
}

message VersionInfo2 {
  string version = 2;
}


service Manager {
  // Version returns the version information of the Manager.
  rpc Version(google.protobuf.Empty) returns (VersionInfo2);

  // Presence

  // ArriveAsClient establishes a session between a client and the Manager.
  rpc ArriveAsClient(ClientInfo) returns (SessionInfo);

  // ArriveAsAgent establishes a session between an agent and the Manager.
  rpc ArriveAsAgent(AgentInfo) returns (SessionInfo);

  // Remain indicates that the session is still valid.
  rpc Remain(SessionInfo) returns (google.protobuf.Empty);

  // Depart terminates a session.
  rpc Depart(SessionInfo) returns (google.protobuf.Empty);

  // Watches

  // WatchAgents notifies a client of the set of known Agents.
  rpc WatchAgents(SessionInfo) returns (stream AgentInfoSnapshot);

  // WatchIntercepts notifies a client or agent of the set of intercepts
  // relevant to that client or agent.
  rpc WatchIntercepts(SessionInfo) returns (stream InterceptInfoSnapshot);

  // CRUD

  // CreateIntercept lets a client create an intercept.
  rpc CreateIntercept(CreateInterceptRequest) returns (InterceptInfo);

  // RemoveIntercept lets a client remove an intercept.
  rpc RemoveIntercept(RemoveInterceptRequest2) returns (google.protobuf.Empty);

  // ReviewIntercept lets an agent approve or reject an intercept.
  rpc ReviewIntercept(ReviewInterceptRequest) returns (google.protobuf.Empty);
}
