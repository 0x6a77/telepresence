syntax = "proto3";

package telepresence.systema;

import "google/protobuf/empty.proto";

option go_package = "github.com/telepresenceio/telepresence/rpc/v2/systema";

// Calls from the cli to Ambassador Cloud (System A) are unauthenticated
// This is because this rpc is (currently) only used to get messages from
// the cloud that we want to be able to raise to all users.
service SystemACli {
  // GetUnauthenticatedCommandMessages is used by the cli to get messages from
  // Ambassador Cloud that should be raised when specified commands are ran if
  // a user is not authenticated with Ambassador Cloud. These are messages
  // that we want to get to users who aren't currently logged into Ambassador
  // Cloud. Telepresence should cache these messages, since they won't change
  // frequently.
  rpc GetUnauthenticatedCommandMessages(google.protobuf.Empty) returns (CommandMessageResponse);
}

message CommandMessageResponse {
  // intercept is the message to give when a user performs an intercept command.
  string intercept = 1;
}

// copied from systemA
service ConnSystemAProxy {
  rpc ResolveIngressInfo(IngressInfoRequest) returns (IngressInfoResponse);
}

// IngressInfoRequest represents the intercept properties required to resolve ingress info
message IngressInfoRequest {
  // The service uid defined in the service's metadata
  string service_uid = 1;

  // The service name
  string service_name = 2;

  // The port name as defined in the service specs
  string service_port_identifier = 3;

  // The port value as defined in the service specs
  int32 service_port = 4;

  // The namespace in which the intercept takes place
  string namespace = 5;
}

// IngressInfoResponse represents the ingress properties required to configure a preview url
message IngressInfoResponse {
  // The layer-3 host
  string host = 1;

  // The layer-4 port
  int32 port = 2;

  // Whether or not to use TLS on the port
  bool use_tls = 3;

  // The layer-5 host
  string l5host = 4;
}