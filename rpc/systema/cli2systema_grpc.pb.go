// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package systema

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SystemACliClient is the client API for SystemACli service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemACliClient interface {
	// GetMessages is used by the cli to get messages from the cloud.
	// Telepresence should cache these messages, since they won't change
	// too frequently.
	GetMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MessageResponse, error)
}

type systemACliClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemACliClient(cc grpc.ClientConnInterface) SystemACliClient {
	return &systemACliClient{cc}
}

func (c *systemACliClient) GetMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/telepresence.systema.SystemACli/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemACliServer is the server API for SystemACli service.
// All implementations must embed UnimplementedSystemACliServer
// for forward compatibility
type SystemACliServer interface {
	// GetMessages is used by the cli to get messages from the cloud.
	// Telepresence should cache these messages, since they won't change
	// too frequently.
	GetMessages(context.Context, *empty.Empty) (*MessageResponse, error)
	mustEmbedUnimplementedSystemACliServer()
}

// UnimplementedSystemACliServer must be embedded to have forward compatible implementations.
type UnimplementedSystemACliServer struct {
}

func (UnimplementedSystemACliServer) GetMessages(context.Context, *empty.Empty) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedSystemACliServer) mustEmbedUnimplementedSystemACliServer() {}

// UnsafeSystemACliServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemACliServer will
// result in compilation errors.
type UnsafeSystemACliServer interface {
	mustEmbedUnimplementedSystemACliServer()
}

func RegisterSystemACliServer(s grpc.ServiceRegistrar, srv SystemACliServer) {
	s.RegisterService(&_SystemACli_serviceDesc, srv)
}

func _SystemACli_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemACliServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.systema.SystemACli/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemACliServer).GetMessages(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemACli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.systema.SystemACli",
	HandlerType: (*SystemACliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessages",
			Handler:    _SystemACli_GetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/systema/cli2systema.proto",
}
