name: Releases

on:
  push:
    tags:
      # These aren't regexps. They are "Workflow Filter patterns"
      - v[0-9]+.[0-9]+.[0-9]
      - v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+

jobs:
  check_workflows_status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate workflows status
        id: workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const requiredWorkflows = ["Build and Unit test", "Integration Tests"];
            for (const workflowName of requiredWorkflows) {
              const workflows = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                status: 'success',
                head_sha: context.sha,
              })
              const workflow = workflows.data.workflow_runs.find(
                (workflow) => workflow.name === workflowName
              )
              if (!workflow) {
                console.log(`Workflow ${workflowName} did not run or finish successfully for this commit`)
                return 'not_run'
              }
            }
            return 'success'
      - name: Print the result
        run: |
          if [ "${{ steps.workflow.outputs.result }}" = "success" ]; then
            echo "All workflows were successful for this commit. Proceeding..."
          else
            echo "Not all workflows were successful for this commit. Exiting..."
            exit 1
          fi

  build-release:
    needs:
      - check_workflows_status
    strategy:
      fail-fast: false
      matrix:
        runners:
          - ubuntu-latest
          - macos-latest
          - macOS-arm64
          - windows-2019
    runs-on: ${{ matrix.runners }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ./.github/actions/install-dependencies
        name: install dependencies
      - name: set version
        run: echo "TELEPRESENCE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - run: make release-binary
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: build-output/release
          retention-days: 1
      - if: runner.os == 'Linux' && runner.arch == 'X64'
        name: Upload Docker image
        run: |
          docker login -u="${{ secrets.DOCKERHUB_USERNAME }}" -p="${{ secrets.DOCKERHUB_PASSWORD }}"
          make push-tel2-image
  release:
    runs-on: ubuntu-latest
    needs: build-release
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "binaries/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## Official Release Artifacts
            ### Linux
               - ðŸ“¦ [telepresence-linux-amd64](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-linux-amd64)
            ### OSX Darwin
               - ðŸ“¦ [telepresence-darwin-amd64](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-darwin-amd64)
               - ðŸ“¦ [telepresence-darwin-arm64](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-darwin-arm64)
            ### Windows
               - ðŸ“¦ [telepresence-windows-amd64.exe](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-windows-amd64.exe)

            For more builds across platforms and architectures, see the `Assets` section below.
            And for more information, visit our [installation docs](https://www.telepresence.io/docs/latest/quick-start/).

            ![Assets](https://static.scarf.sh/a.png?x-pxid=d842651a-2e4d-465a-98e1-4808722c01ab)
